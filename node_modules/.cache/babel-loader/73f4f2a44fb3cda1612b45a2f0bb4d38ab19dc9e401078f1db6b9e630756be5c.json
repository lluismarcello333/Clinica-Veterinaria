{"ast":null,"code":"var _jsxFileName = \"/home/luiz/Documentos/Jobs/Veterinaria/veterinaria/src/components/header/Header.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Logo from \"../../assets/logoVet.svg\";\nimport HeaderButtonGroup from \"../buttonGroup/HeaderButtonGroup\";\nimport CartComponent from '../cart/Cart';\nimport \"./Header.css\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Header() {\n  _s();\n  const {\n    cart\n  } = useSelector(rootReducer => rootReducer.cart);\n  const [showCart, setShowCart] = useState(false);\n  const [isFocused, setIsFocused] = useState(false); // Estado local para controlar o foco do carrinho\n  const [itemCount, setItemCount] = useState(0);\n  const calculateItemCount = () => {\n    const count = cart.reduce((total, product) => {\n      var _product$quantity;\n      return total + ((_product$quantity = product.quantity) !== null && _product$quantity !== void 0 ? _product$quantity : 0);\n    }, 0);\n    console.log(\"Número de itens calculado:\", count);\n    return count;\n  };\n  useEffect(() => {\n    // Atualize a contagem de itens no carrinho sempre que o carrinho for atualizado\n    setItemCount(calculateItemCount());\n  }, [cart]);\n  const toggleCart = () => {\n    setShowCart(!showCart);\n  };\n  const handleFocus = () => {\n    setIsFocused(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"header-logo\",\n        src: Logo,\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HeaderButtonGroup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), showCart && /*#__PURE__*/_jsxDEV(CartComponent, {\n      showCart: showCart,\n      cart: cart,\n      onContinueShopping: () => setIsFocused(false) // Função para remover o foco do carrinho\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Header, \"5PUhIZaEOsdJkpv63ZIRf3kVNFw=\", false, function () {\n  return [useSelector];\n});\n_c = Header;\nexport default Header;\n\n// Adicionei o evento a ser exibido ao clicar no carrinho de compras\n// Mudei o carrinho de compras para um componente\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useEffect","useState","Logo","HeaderButtonGroup","CartComponent","useSelector","jsxDEV","_jsxDEV","Header","_s","cart","rootReducer","showCart","setShowCart","isFocused","setIsFocused","itemCount","setItemCount","calculateItemCount","count","reduce","total","product","_product$quantity","quantity","console","log","toggleCart","handleFocus","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onContinueShopping","_c","$RefreshReg$"],"sources":["/home/luiz/Documentos/Jobs/Veterinaria/veterinaria/src/components/header/Header.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Logo from \"../../assets/logoVet.svg\";\nimport HeaderButtonGroup from \"../buttonGroup/HeaderButtonGroup\";\nimport CartComponent from '../cart/Cart';\nimport \"./Header.css\";\nimport { RootReducer } from \"../../redux/root-reducer\";\nimport { useSelector } from \"react-redux\";\nimport ShoppingCartIcon from \"@mui/icons-material/ShoppingCart\";\nimport Badge from \"@mui/material/Badge\";\n\nfunction Header() {\n  const { cart } = useSelector(\n    (rootReducer: RootReducer) => rootReducer.cart\n  );\n\n  const [showCart, setShowCart] = useState(false);\n  const [isFocused, setIsFocused] = useState(false); // Estado local para controlar o foco do carrinho\n  const [itemCount, setItemCount] = useState(0);\n\n  const calculateItemCount = () => {\n    const count = cart.reduce((total, product) => total + (product.quantity ?? 0), 0);\n    console.log(\"Número de itens calculado:\", count);\n    return count;\n  };\n\n  useEffect(() => {\n    // Atualize a contagem de itens no carrinho sempre que o carrinho for atualizado\n    setItemCount(calculateItemCount());\n  }, [cart]\n  \n  );\n  \n  const toggleCart = () => {\n    setShowCart(!showCart);\n  };\n\n  const handleFocus = () => {\n    setIsFocused(true);\n  };\n\n  return (\n    <div className=\"header-container\">\n      <div className=\"logo\">\n        <img className=\"header-logo\" src={Logo} alt=\"Logo\" /> {/*Colocar a Logo aqui*/}\n        {/* <h1>Clinica Veterinária Dra. Amara Areias</h1> */}\n      </div>\n\n{/*       <div\n        className={`cart ${showCart && isFocused ? \"center\" : \"\"}`}\n        onClick={toggleCart}\n      >\n        {showCart && isFocused && (\n          <div className=\"overlay\" onClick={() => setIsFocused(false)}></div>\n        )}\n\n        <Badge\n          badgeContent={itemCount}\n          color=\"error\"\n          onClick={handleFocus}\n          className=\"header-cart\"\n        >\n          <ShoppingCartIcon sx={{ fontSize: 40 }} />\n        </Badge>\n\n      </div> */}\n      <HeaderButtonGroup />\n      <hr />\n\n      {showCart && (\n        <CartComponent\n          showCart={showCart}\n          cart={cart}\n          onContinueShopping={() => setIsFocused(false)} // Função para remover o foco do carrinho\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Header;\n\n// Adicionei o evento a ser exibido ao clicar no carrinho de compras\n// Mudei o carrinho de compras para um componente\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,0BAA0B;AAC3C,OAAOC,iBAAiB,MAAM,kCAAkC;AAChE,OAAOC,aAAa,MAAM,cAAc;AACxC,OAAO,cAAc;AAErB,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1C,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM;IAAEC;EAAK,CAAC,GAAGL,WAAW,CACzBM,WAAwB,IAAKA,WAAW,CAACD,IAC5C,CAAC;EAED,MAAM,CAACE,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAE7C,MAAMiB,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,KAAK,GAAGT,IAAI,CAACU,MAAM,CAAC,CAACC,KAAK,EAAEC,OAAO;MAAA,IAAAC,iBAAA;MAAA,OAAKF,KAAK,KAAAE,iBAAA,GAAID,OAAO,CAACE,QAAQ,cAAAD,iBAAA,cAAAA,iBAAA,GAAI,CAAC,CAAC;IAAA,GAAE,CAAC,CAAC;IACjFE,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEP,KAAK,CAAC;IAChD,OAAOA,KAAK;EACd,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd;IACAiB,YAAY,CAACC,kBAAkB,CAAC,CAAC,CAAC;EACpC,CAAC,EAAE,CAACR,IAAI,CAER,CAAC;EAED,MAAMiB,UAAU,GAAGA,CAAA,KAAM;IACvBd,WAAW,CAAC,CAACD,QAAQ,CAAC;EACxB,CAAC;EAED,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACxBb,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,oBACER,OAAA;IAAKsB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/BvB,OAAA;MAAKsB,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBvB,OAAA;QAAKsB,SAAS,EAAC,aAAa;QAACE,GAAG,EAAE7B,IAAK;QAAC8B,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEnD,CAAC,eAoBN7B,OAAA,CAACJ,iBAAiB;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrB7B,OAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAELxB,QAAQ,iBACPL,OAAA,CAACH,aAAa;MACZQ,QAAQ,EAAEA,QAAS;MACnBF,IAAI,EAAEA,IAAK;MACX2B,kBAAkB,EAAEA,CAAA,KAAMtB,YAAY,CAAC,KAAK,CAAE,CAAC;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3B,EAAA,CAnEQD,MAAM;EAAA,QACIH,WAAW;AAAA;AAAAiC,EAAA,GADrB9B,MAAM;AAqEf,eAAeA,MAAM;;AAErB;AACA;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}